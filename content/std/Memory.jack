class Memory {
    static int freeList;

    function void init() {
        /* Initialize heap between the stack at 2048 and screen memory at 16384. */
        do Memory._init_heap(2048, 16384);
        return;
    }

    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    function void deAlloc(int obj_ptr) {
        var int first_segment;
        let first_segment = Memory.peek(freeList + 1);
        do Memory.poke(obj_ptr, first_segment);
        do Memory.poke(freeList + 1, obj_ptr - 1);
        return;
    }

    function int alloc(int size) {
        var int block, parent_ptr;
        var int segment_ptr, segment_size;

        let size = size + 1;

        let parent_ptr = Memory._find_best_segment(size);

        let segment_ptr = Memory.peek(parent_ptr);
        let segment_size = Memory.peek(segment_ptr);

        if (segment_size = size) {
            return Memory._alloc_exact(parent_ptr, segment_ptr);
        } else {
            return Memory._alloc_part(segment_ptr, size);
        }
    }

    function int _alloc_exact(int parent_ptr, int segment_ptr) {
        var int next_segment_ptr;
        let next_segment_ptr = Memory.peek(segment_ptr + 1);
        do Memory.poke(parent_ptr, next_segment_ptr);
        return segment_ptr + 1;
    }

    function int _alloc_part(int segment_ptr, int size) {
        var int block_ptr, segment_size;

        let segment_size = Memory.peek(segment_ptr);
        do Memory.poke(segment_ptr, segment_size - size);

        let block_ptr = segment_ptr + segment_size - size;
        do Memory.poke(block_ptr, size);

        return block_ptr + 1;
    }

    function int _find_best_segment(int size) {
        var int best_parent, best_size;
        var int segment_ptr, segment_size, parent_ptr;

        let best_parent = 0;
        let best_size = 32767;

        let parent_ptr = freeList + 1;
        let segment_ptr = Memory.peek(parent_ptr);

        while (segment_ptr > 0) {
            let segment_size = Memory.peek(segment_ptr);

            if (segment_size = size) {
                // found a perfectly matching segment
                return parent_ptr;
            }

            if (segment_size > size) {
                if (segment_size < best_size) {
                    let best_parent = parent_ptr;
                    let best_size = segment_size;
                }
            }

            let parent_ptr = segment_ptr + 1;
            let segment_ptr = Memory.peek(parent_ptr);
        }

        return best_parent;
    }

    function int _get_freelist() {
        return freeList;
    }

    function void _set_freelist(int addr) {
        let freeList = addr;
        return;
    }

    function void _init_heap(int start_addr, int end_addr) {
        /* Initialize heap to a single free block in given address range.
           Also insert a dummy segment of size 0 at the start of the heap. (To allow manipulating
           the linked list of segments without knowing the address of freeList.) */
        let freeList = start_addr;
        do Memory.poke(freeList, 0);
        do Memory.poke(freeList + 1, freeList + 2);
        do Memory.poke(freeList + 2, end_addr - (start_addr + 2));
        do Memory.poke(freeList + 3, 0);
        return;
    }

    function void _cons_heap_segment(int start_addr, int end_addr) {
        /* Prepend a heap segment to the linked list of free segments.
           (insert it after the first empty dummy segment)
         */
         var int first_segment;
         let first_segment = Memory.peek(freeList + 1);
         do Memory.poke(start_addr, end_addr - start_addr);
         do Memory.poke(start_addr + 1, first_segment);
         do Memory.poke(freeList + 1, start_addr);
         return;
    }
}
